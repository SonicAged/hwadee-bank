<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hwadee.backend.mapper.SysRoleMapper">

    <resultMap id="BaseResultMap" type="org.hwadee.backend.entity.SysRole">
        <id column="role_id" property="roleId"/>
        <result column="role_name" property="roleName"/>
        <result column="role_key" property="roleKey"/>
        <result column="description" property="description"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        role_id, role_name, role_key, description, status, create_time, update_time
    </sql>

    <insert id="insert" parameterType="org.hwadee.backend.entity.SysRole" useGeneratedKeys="true" keyProperty="roleId">
        INSERT INTO sys_role (
            role_name, role_key, description, status
        ) VALUES (
            #{roleName}, #{roleKey}, #{description}, #{status}
        )
    </insert>

    <update id="update" parameterType="org.hwadee.backend.entity.SysRole">
        UPDATE sys_role
        <set>
            <if test="roleName != null and roleName != ''">role_name = #{roleName},</if>
            <if test="roleKey != null and roleKey != ''">role_key = #{roleKey},</if>
            <if test="description != null">description = #{description},</if>
            <if test="status != null">status = #{status},</if>
        </set>
        WHERE role_id = #{roleId}
    </update>

    <delete id="deleteById">
        DELETE FROM sys_role WHERE role_id = #{roleId}
    </delete>

    <delete id="deleteBatch">
        DELETE FROM sys_role WHERE role_id IN
        <foreach collection="roleIds" item="roleId" open="(" separator="," close=")">
            #{roleId}
        </foreach>
    </delete>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM sys_role WHERE role_id = #{roleId}
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM sys_role ORDER BY create_time DESC
    </select>

    <select id="selectByCondition" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_role
        <where>
            <if test="roleName != null and roleName != ''">
                AND role_name LIKE CONCAT('%', #{roleName}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
        ORDER BY create_time DESC
        <if test="offset != null and limit != null">
            LIMIT #{offset}, #{limit}
        </if>
    </select>

    <select id="countByCondition" resultType="long">
        SELECT COUNT(1)
        FROM sys_role
        <where>
            <if test="roleName != null and roleName != ''">
                AND role_name LIKE CONCAT('%', #{roleName}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
    </select>

    <select id="checkRoleNameExists" resultType="int">
        SELECT COUNT(1) FROM sys_role 
        WHERE role_name = #{roleName}
        <if test="roleId != null">
            AND role_id != #{roleId}
        </if>
    </select>

    <select id="checkRoleKeyExists" resultType="int">
        SELECT COUNT(1) FROM sys_role 
        WHERE role_key = #{roleKey}
        <if test="roleId != null">
            AND role_id != #{roleId}
        </if>
    </select>

    <select id="selectRolesByUserId" resultMap="BaseResultMap">
        SELECT r.role_id, r.role_name, r.role_key, r.description, r.status, r.create_time, r.update_time
        FROM sys_role r
        INNER JOIN sys_user_role ur ON r.role_id = ur.role_id
        WHERE ur.user_id = #{userId} AND r.status = 1
    </select>

    <insert id="insertRolePermission">
        INSERT INTO sys_role_permission (role_id, permission_id) VALUES (#{roleId}, #{permissionId})
    </insert>

    <delete id="deleteRolePermissionByRoleId">
        DELETE FROM sys_role_permission WHERE role_id = #{roleId}
    </delete>

    <select id="selectPermissionIdsByRoleId" resultType="long">
        SELECT permission_id FROM sys_role_permission WHERE role_id = #{roleId}
    </select>
</mapper> 