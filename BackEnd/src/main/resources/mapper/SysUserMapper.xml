<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hwadee.backend.mapper.SysUserMapper">

    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="org.hwadee.backend.entity.SysUser">
        <id column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="avatar" property="avatar" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="TINYINT"/>
        <result column="birth_date" property="birthDate" jdbcType="DATE"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        user_id, username, password, real_name, email, phone, avatar, gender, 
        birth_date, status, last_login_time, create_time, update_time
    </sql>

    <!-- 根据用户名查询用户 -->
    <select id="selectByUsername" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE username = #{username}
    </select>

    <!-- 根据用户ID查询用户 -->
    <select id="selectByUserId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE user_id = #{userId}
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectByEmail" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE email = #{email}
    </select>

    <!-- 插入用户 -->
    <insert id="insert" parameterType="org.hwadee.backend.entity.SysUser" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO sys_user (
            username, password, real_name, email, phone, avatar, gender, 
            birth_date, status, create_time, update_time
        ) VALUES (
            #{username}, #{password}, #{realName}, #{email}, #{phone}, #{avatar}, #{gender},
            #{birthDate}, #{status}, NOW(), NOW()
        )
    </insert>

    <!-- 更新用户信息 -->
    <update id="update" parameterType="org.hwadee.backend.entity.SysUser">
        UPDATE sys_user
        <set>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="realName != null and realName != ''">real_name = #{realName},</if>
            <if test="email != null and email != ''">email = #{email},</if>
            <if test="phone != null and phone != ''">phone = #{phone},</if>
            <if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="birthDate != null">birth_date = #{birthDate},</if>
            <if test="status != null">status = #{status},</if>
            update_time = NOW()
        </set>
        WHERE user_id = #{userId}
    </update>

    <!-- 根据用户ID删除用户 -->
    <delete id="deleteByUserId">
        DELETE FROM sys_user WHERE user_id = #{userId}
    </delete>

    <!-- 查询所有用户（分页） -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 根据条件查询用户数量 -->
    <select id="countByCondition" resultType="long">
        SELECT COUNT(*)
        FROM sys_user
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="realName != null and realName != ''">
                AND real_name LIKE CONCAT('%', #{realName}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
    </select>

    <!-- 根据条件查询用户列表 -->
    <select id="selectByCondition" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="realName != null and realName != ''">
                AND real_name LIKE CONCAT('%', #{realName}, '%')
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 更新最后登录时间 -->
    <update id="updateLastLoginTime">
        UPDATE sys_user 
        SET last_login_time = NOW() 
        WHERE user_id = #{userId}
    </update>

    <!-- 根据用户ID查询用户角色 -->
    <select id="selectRolesByUserId" resultType="string">
        SELECT r.role_key
        FROM sys_role r
        INNER JOIN sys_user_role ur ON r.role_id = ur.role_id
        WHERE ur.user_id = #{userId} AND r.status = 1
    </select>

    <!-- 根据用户ID查询用户权限 -->
    <select id="selectPermissionsByUserId" resultType="string">
        SELECT DISTINCT p.permission_key
        FROM sys_permission p
        INNER JOIN sys_role_permission rp ON p.permission_id = rp.permission_id
        INNER JOIN sys_user_role ur ON rp.role_id = ur.role_id
        WHERE ur.user_id = #{userId} AND p.status = 1
    </select>

</mapper> 